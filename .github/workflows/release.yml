name: Release Binaries

on:
  push:
    branches: ["master", "nightly"]
    tags: ["v*"]
  pull_request:
    branches: ["master", "nightly"]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-apple-darwin
    permissions:
      contents: write  # Required for action-gh-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine channel
        id: channel
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "channel=stable" >> $GITHUB_OUTPUT
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "channel=stable" >> $GITHUB_OUTPUT
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            echo "version=${SHORT_SHA}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "nightly" ]]; then
            echo "channel=nightly" >> $GITHUB_OUTPUT
            DATE=$(date +%Y%m%d)
            echo "version=${DATE}" >> $GITHUB_OUTPUT
          else
            echo "channel=dev" >> $GITHUB_OUTPUT
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            echo "version=${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "channel=pr" >> $GITHUB_OUTPUT
            echo "version=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract Cargo versions
        id: cargo-versions
        run: |
          HOON_VERSION=$(grep '^version[[:space:]]*=' crates/hoon/Cargo.toml | sed 's/.*=[[:space:]]*"\([^"]*\)".*/\1/' | head -1)
          HOONC_VERSION=$(grep '^version[[:space:]]*=' crates/hoonc/Cargo.toml | sed 's/.*=[[:space:]]*"\([^"]*\)".*/\1/' | head -1)
          NOCKUP_VERSION=$(grep '^version[[:space:]]*=' crates/nockup/Cargo.toml | sed 's/.*=[[:space:]]*"\([^"]*\)".*/\1/' | head -1)
          # For nightly, append date
          if [[ "${{ steps.channel.outputs.channel }}" == "nightly" ]]; then
            DATE=$(date +%Y%m%d)
            HOON_VERSION="${HOON_VERSION}-${DATE}"
            HOONC_VERSION="${HOONC_VERSION}-${DATE}"
            NOCKUP_VERSION="${NOCKUP_VERSION}-${DATE}"
          fi
          # Validate versions
          if [[ -z "$HOON_VERSION" || -z "$HOONC_VERSION" || -z "$NOCKUP_VERSION" ]]; then
            echo "Error: Missing version in one or more Cargo.toml files"
            exit 1
          fi
          echo "hoon_version=$HOON_VERSION" >> $GITHUB_OUTPUT
          echo "hoonc_version=$HOONC_VERSION" >> $GITHUB_OUTPUT
          echo "nockup_version=$NOCKUP_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted versions: hoon=$HOON_VERSION, hoonc=$HOONC_VERSION, nockup=$NOCKUP_VERSION"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2

      - name: Build hoon
        run: |
          cargo build --release --bin hoon --manifest-path crates/hoon/Cargo.toml
          file target/release/hoon

      - name: Build hoonc
        run: |
          cargo build --release --bin hoonc --manifest-path crates/hoonc/Cargo.toml
          file target/release/hoonc

      - name: Build nockup
        run: |
          cargo build --release --bin nockup --manifest-path crates/nockup/Cargo.toml
          file target/release/nockup

      - name: Set up GPG
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly' || github.ref_type == 'tag')
        run: |
          # Import GPG private key
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | tr -d '\n' | base64 -d | gpg --batch --import
          # Get the full fingerprint and trust the key
          FINGERPRINT=$(gpg --list-secret-keys --with-colons | grep '^fpr:' | head -1 | cut -d: -f10)
          echo "${FINGERPRINT}:6:" | gpg --import-ownertrust
          # Verify key is available
          gpg --list-secret-keys

      - name: Package and sign binaries
        run: |
          mkdir -p dist
          CHANNEL="${{ steps.channel.outputs.channel }}"
          HOON_VERSION="${{ steps.cargo-versions.outputs.hoon_version }}"
          HOONC_VERSION="${{ steps.cargo-versions.outputs.hoonc_version }}"
          NOCKUP_VERSION="${{ steps.cargo-versions.outputs.nockup_version }}"
          SHOULD_SIGN="${{ matrix.os == 'ubuntu-latest' && github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly' || github.ref_type == 'tag') }}"
          
          if [[ "$CHANNEL" == "pr" ]]; then
            echo "Skipping packaging for PRs"
            exit 0
          fi
          
          # Copy and make executable (using root target/release/)
          if [ -f target/release/hoon ]; then
            cp target/release/hoon dist/hoon
            chmod +x dist/hoon
          else
            echo "Skipping hoon copy: binary missing"
          fi
          if [ -f target/release/hoonc ]; then
            cp target/release/hoonc dist/hoonc
            chmod +x dist/hoonc
          else
            echo "Skipping hoonc copy: binary missing"
          fi
          if [ -f target/release/nockup ]; then
            cp target/release/nockup dist/nockup
            chmod +x dist/nockup
          else
            echo "Skipping nockup copy: binary missing"
          fi
          
          # Sign individual binaries if this is a release build
          if [[ "$SHOULD_SIGN" == "true" ]]; then
            echo "Signing binaries..."
            if [ -f dist/hoon ]; then
              gpg --batch --yes --detach-sign --armor --default-key "${{ secrets.GPG_KEY_ID }}" dist/hoon
              echo "Created dist/hoon.asc"
            fi
            if [ -f dist/hoonc ]; then
              gpg --batch --yes --detach-sign --armor --default-key "${{ secrets.GPG_KEY_ID }}" dist/hoonc
              echo "Created dist/hoonc.asc"
            fi
            if [ -f dist/nockup ]; then
              gpg --batch --yes --detach-sign --armor --default-key "${{ secrets.GPG_KEY_ID }}" dist/nockup
              echo "Created dist/nockup.asc"
            fi
          else
            echo "Skipping binary signing for non-release builds"
          fi
          
          # Create archives with channel and per-crate versions
          if [ -f dist/hoon ]; then
            tar -czf dist/hoon-${CHANNEL}-${HOON_VERSION}-${{ matrix.target }}.tar.gz -C dist hoon
            # Sign the archive if this is a release build
            if [[ "$SHOULD_SIGN" == "true" ]]; then
              gpg --batch --yes --detach-sign --armor --default-key "${{ secrets.GPG_KEY_ID }}" dist/hoon-${CHANNEL}-${HOON_VERSION}-${{ matrix.target }}.tar.gz
            fi
          fi
          if [ -f dist/hoonc ]; then
            tar -czf dist/hoonc-${CHANNEL}-${HOONC_VERSION}-${{ matrix.target }}.tar.gz -C dist hoonc
            # Sign the archive if this is a release build
            if [[ "$SHOULD_SIGN" == "true" ]]; then
              gpg --batch --yes --detach-sign --armor --default-key "${{ secrets.GPG_KEY_ID }}" dist/hoonc-${CHANNEL}-${HOONC_VERSION}-${{ matrix.target }}.tar.gz
            fi
          fi
          if [ -f dist/nockup ]; then
            tar -czf dist/nockup-${CHANNEL}-${NOCKUP_VERSION}-${{ matrix.target }}.tar.gz -C dist nockup
            # Sign the archive if this is a release build
            if [[ "$SHOULD_SIGN" == "true" ]]; then
              gpg --batch --yes --detach-sign --armor --default-key "${{ secrets.GPG_KEY_ID }}" dist/nockup-${CHANNEL}-${NOCKUP_VERSION}-${{ matrix.target }}.tar.gz
            fi
          fi
          
          echo "Packaged artifacts for channel $CHANNEL:"
          ls -la dist/

      - name: Upload release assets
        if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/nightly' || github.ref_type == 'tag')  # Only on qualifying pushes/tags, not PRs
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.channel.outputs.channel }}-build-${{ github.sha }}
          name: ${{ steps.channel.outputs.channel }} Build ${{ github.sha }}
          files: |
            dist/hoon-${{ steps.channel.outputs.channel }}-${{ steps.cargo-versions.outputs.hoon_version }}-${{ matrix.target }}.tar.gz
            ${{ matrix.os == 'ubuntu-latest' && format('dist/hoon-{0}-{1}-{2}.tar.gz.asc', steps.channel.outputs.channel, steps.cargo-versions.outputs.hoon_version, matrix.target) || '' }}
            dist/hoonc-${{ steps.channel.outputs.channel }}-${{ steps.cargo-versions.outputs.hoonc_version }}-${{ matrix.target }}.tar.gz
            ${{ matrix.os == 'ubuntu-latest' && format('dist/hoonc-{0}-{1}-{2}.tar.gz.asc', steps.channel.outputs.channel, steps.cargo-versions.outputs.hoonc_version, matrix.target) || '' }}
            dist/nockup-${{ steps.channel.outputs.channel }}-${{ steps.cargo-versions.outputs.nockup_version }}-${{ matrix.target }}.tar.gz
            ${{ matrix.os == 'ubuntu-latest' && format('dist/nockup-{0}-{1}-{2}.tar.gz.asc', steps.channel.outputs.channel, steps.cargo-versions.outputs.nockup_version, matrix.target) || '' }}
